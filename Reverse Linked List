 # ITERATIONS
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* next = NULL;
        while(curr!=NULL){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
};
*/

/* RECURSIONS */

class Solution {
    public:
    ListNode* revList(ListNode* prev,ListNode* curr)
{
    //Base condition if no current element present
    if(curr==NULL) return prev;
    ListNode* next= curr->next;  //save the next
    curr->next=prev;
    return revList(curr, next); }
    ListNode* reverseList(ListNode* head){
        return revList(NULL,head); // initially prev as NULL.
    }
};
