class Solution {
public:
   
ListNode* reverseKGroup(ListNode* head, int k) {
    // Base case: Check if there are at least K nodes left to reverse
    ListNode* temp = head;
    for (int i = 0; i < k; i++) {
        if (temp == NULL) {
            return head;
        }
        temp = temp->next;
    }

    // Step 1: Reverse the first K nodes
    ListNode* next = NULL;
    ListNode* curr = head;
    ListNode* prev = NULL;
    int count = 0;

    while (curr != NULL && count < k) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
        count++;
    }

    // Step 2: Recursion for the next K group
    if (next != NULL) {
        head->next = reverseKGroup(next, k);
    }

    // Step 3: Return the head of the reversed list
    return prev;
}

};
